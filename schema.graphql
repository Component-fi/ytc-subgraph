type Term @entity {
  id: ID!
  address: Bytes! #address
  expiration: BigInt!
  timeStarted: BigInt!
  baseToken: BaseToken!
  entryTransactions: [EntryTransaction!]! @derivedFrom(field: "term")
  trancheDecimals: Int!
  wrappedDecimals: Int!
  yToken: YieldToken! @derivedFrom(field: "term")
  pToken: PrincipalToken! @derivedFrom(field: "term")
}

type TermList @entity {
  id: ID!
  activeTerms: [Term!]!
  lastUpdate: BigInt!
}

type AccruedValue @entity {
  id: ID!
  trancheSupply: BigInt!
  ytSupply: BigInt!
  wrappedSupply: BigInt!
}

type YieldPoolState @entity {
  id: ID!
  timestamp: Timestamp!
  timestampId: BigInt!
  ytReserves: BigInt!
  baseReserves: BigInt!
  spotPrice: BigDecimal!
  pool: YieldPool!
  accruedValue: AccruedValue!
}

type PrincipalPoolState @entity {
  id: ID!
  timestamp: Timestamp!
  timestampId: BigInt!
  ptReserves: BigInt!
  baseReserves: BigInt!
  totalSupply: BigInt!
  spotPrice: BigDecimal!
  fixedRate: BigDecimal!
  pool: PrincipalPool!
}

type EntryTransaction @entity {
  id: ID!
  numberOfCompounds: Int!
  term: Term!
  amountCollateralDeposited: BigInt!
  baseTokensSpent: BigInt!
  yieldTokensReceived: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  from: User!
  timestamp: Timestamp!
  timestampId: BigInt!
  accruedValue: AccruedValue!
}

type BaseToken @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  terms: [Term!]! @derivedFrom(field: "baseToken")
  yPools: [YieldPool!]! @derivedFrom(field: "baseToken")
  pPools: [PrincipalPool!]! @derivedFrom(field: "baseToken")
}

type YieldToken @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  term: Term!
  pool: YieldPool @derivedFrom(field: "yToken")
}

type PrincipalToken @entity {
  id: ID!
  expiration: BigInt!
  name: String!
  symbol: String!
  decimals: Int!
  term: Term!
  pool: PrincipalPool @derivedFrom(field: "pToken")
}

type User @entity {
  id: ID!
  Transactions: [EntryTransaction!]! @derivedFrom(field: "from")
}

type YieldPool @entity {
  id: ID!
  yToken: YieldToken!
  baseToken: BaseToken!
  yTokenWeight: BigInt!
  baseTokenWeight: BigInt!
  address: Bytes!
  swapFeePercentage: BigInt!
  name: String!
  term: Term!
  states: [YieldPoolState!]! @derivedFrom(field: "pool")
}

type PrincipalPool @entity {
  id: ID!
  pToken: PrincipalToken!
  baseToken: BaseToken!
  unitSeconds: BigInt!
  swapFeePercentage: BigInt!
  address: Bytes!
  states: [PrincipalPoolState!]! @derivedFrom(field: "pool")
}

type Timestamp @entity {
  id: ID!
  principalPoolState: [PrincipalPoolState!]! @derivedFrom(field: "timestamp")
  yieldPoolState: [YieldPoolState!]! @derivedFrom(field: "timestamp")
  entryTransactions: [EntryTransaction!]! @derivedFrom(field: "timestamp")
  prices: [Price!]! @derivedFrom(field: "timestamp")
  day: Day!
}

type PriceFeed @entity {
  id: ID!
  numeratorName: String!
  denominatorName: String!
  tokenAddress: Bytes!
  prices: [Price!]! @derivedFrom(field: "priceFeed")
}

type Price @entity {
  id: ID!
  priceFeed: PriceFeed!
  price: BigInt
  decimals: Int
  timestamp: Timestamp!
  timestampId: BigInt!
}

type Day @entity {
  id: ID!
  year: Int!
  month: Int!
  day: Int!
  timestamps: [Timestamp!]! @derivedFrom(field: "day")
}